apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "firezone.domain.fullname" . }}
  labels:
    {{- include "firezone.domain.labels" . | nindent 4 }}
spec:
  {{- if not .Values.domain.autoscaling.enabled }}
  replicas: {{ .Values.domain.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.domain.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "firezone.domain.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.domain.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "firezone.domain.labels" . | nindent 8 }}
        {{- with .Values.domain.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{ .Values.global.erlangCluster.kubernetes.selector.key }}: {{ .Values.global.erlangCluster.kubernetes.selector.value }}
    spec:
      {{- with .Values.domain.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "firezone.domain.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.domain.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.domain.securityContext | nindent 12 }}
          image: "{{ .Values.domain.image.repository }}:{{ .Values.domain.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.domain.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "firezone.fullname" . }}
          env:
            - name: RELEASE_NAME
              {{- if (and .Values.global.erlangCluster.enableKubernetesClusterModule (ne .Values.web.releaseName .Values.domain.releaseName)) }}
              {{- required "domain and web release names must be identical when using default kubernetes cluster module" "" }}
              {{- else }}
              value: {{ .Values.domain.releaseName }}
              {{- end }}
            - name: RELEASE_HOSTNAME
              {{- if .Values.global.erlangCluster.enableKubernetesClusterModule }}
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
              {{- else }}
              value: {{ .Values.domain.releaseHostname }}
              {{- end }}
            - name: BACKGROUND_JOBS_ENABLED
              value: {{ .Values.domain.backgroundJobsEnabled | quote }}
            {{ include "firezone.common" . | nindent 12 }}
            {{ include "firezone.database.auth" . | nindent 12 }}
            {{ include "firezone.secrets" . | nindent 12 }}
            {{- with .Values.domain.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.global.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
            - name: epmd
              containerPort: {{ .Values.global.erlangCluster.epmdPort }}
              protocol: TCP
            - name: distribution
              containerPort: {{ .Values.global.erlangCluster.distributionPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: {{ .Values.domain.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.domain.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.domain.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.domain.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.domain.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: {{ .Values.domain.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.domain.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.domain.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.domain.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.domain.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.domain.resources | nindent 12 }}
          {{- with .Values.domain.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.domain.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.domain.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.domain.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.domain.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.domain.dnsPolicy }}
      dnsPolicy: {{ .Values.domain.dnsPolicy }}
      {{- end }}
      {{- with .Values.domain.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
