nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local

global:
  logLevel: debug

  # External HTTP web URL
  # https://firezone.domain.tld
  externalWebURL:
  # External websocket API URL
  # wss://api.firezone.domain.tld
  externalApiWSURL:
  # External HTTP API URL
  # https://api.firezone.domain.tld
  externalApiURL:

  # Firezone supports OpenTelemetry for traces.
  otlp:
    # Firezone only supports HTTP endpoint
    # Example value: http://localhost:4318
    endpoint:

  # Postgres database configuration
  database:
    host:
    port:
    database:
    ssl:
      enabled: false
      opts:
    username:
      secret:
      key: username
    password:
      secret:
      key: password
    pool_size:
    parameters:

  # The erlang cluster is preconfigured to run with Kubernetes
  # You only need to provide your nodes with a common RELEASE_COOKIE
  erlangCluster:
    epmdPort: 4369
    distributionPort: 9000

    cookie:
      secret:
      key: RELEASE_COOKIE

    enableKubernetesClusterModule: true
    kubernetes:
      selector:
        key: erlangcluster
        value: firezone
    # If using a custom adapter you'll probably need to update `web/api.releaseName` and `web/api.releaseHostname`
    custom:
      adapter:
      opts:

  # Phoenix secrets
  phoenix:
    keyBase:
      secret:
      key: SECRET_KEY_BASE
    liveViewSalt:
      secret:
      key: LIVE_VIEW_SIGNING_SALT
    cookieSigningSalt:
      secret:
      key: COOKIE_SIGNING_SALT
    cookieEncryptionSalt:
      secret:
      key: COOKIE_ENCRYPTION_SALT

  # Firezone tokens secrets
  tokens:
    keyBase:
      secret:
      key: TOKENS_KEY_BASE
    salt:
      secret:
      key: TOKENS_SALT
  
  # Email configuration
  # See all possible adapters and configurations
  # https://github.com/swoosh/swoosh#adapters
  email:
    adapter: Elixir.Swoosh.Adapters.SMTP
    from: firezone@domain.tld
    opts:
      secret:
      key: OUTBOUND_EMAIL_ADAPTER_OPTS

  # List of enabled auth providers
  # You can find the full list in Firezone repository
  # Example: token, email, openid_connect, google_workspace, ...
  authProviders:
    - token
    - email

  # Enable account creation from the portal
  signup:
    enabled: true
    # List of email domains allowed to signup from.
    # Leave empty to allow signing up from any domain.
    whitelistedDomains: []

  # These features must be activated globally and per
  # account.
  features:
    idpSync:
      enabled: true
    flowActivities:
      enabled: true
    selfHostedRelays:
      enabled: true
    multiSiteResources:
      enabled: true
    policyConditions:
      enabled: true
    restApi:
      enabled: true
    internetResource:
      enabled: true

  # Docker registry used in the website when displaying
  # deployment tutorials
  dockerRegistry: ghcr.io/firezone

  # Common extra env for all pods
  extraEnv: []

web:
  replicaCount: 1
  revisionHistoryLimit: 10

  image:
    repository: ghcr.io/firezone/web
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  extraEnv: []
  releaseName: firezone
  # Only needed if kubernetes cluster module is disabled
  releaseHostname:

  backgroundJobsEnabled: false

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false

  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    portName: http

  ingress:
    enabled: false
    className: ""
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  volumes: []

  volumeMounts: []

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsPolicy: ~
  dnsConfig: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  pdb:
    enabled: false
    labels: {}
    annotations: {}
    minAvailable: ""
    maxUnavailable: ""

api:
  replicaCount: 1
  revisionHistoryLimit: 10

  image:
    repository: ghcr.io/firezone/api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  extraEnv: []
  releaseName: firezone
  # Only needed if kubernetes cluster module is disabled
  releaseHostname:

  backgroundJobsEnabled: false

  imagePullSecrets: []

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false

  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    portName: http

  ingress:
    enabled: false
    className: ""
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  volumes: []

  volumeMounts: []

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsPolicy: ~
  dnsConfig: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  pdb:
    enabled: false
    labels: {}
    annotations: {}
    minAvailable: ""
    maxUnavailable: ""

domain:
  replicaCount: 1
  revisionHistoryLimit: 10

  image:
    repository: ghcr.io/firezone/domain
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  extraEnv: []
  releaseName: firezone
  # Only needed if kubernetes cluster module is disabled
  releaseHostname:

  backgroundJobsEnabled: true

  imagePullSecrets: []

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false

  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  volumes: []

  volumeMounts: []

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsPolicy: ~
  dnsConfig: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  pdb:
    enabled: false
    labels: {}
    annotations: {}
    minAvailable: ""
    maxUnavailable: ""
